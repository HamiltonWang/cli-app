'use strict';

const chalk = require('chalk');
const isMissingData = require('./validations').isMissingData;
const max_promotions = 3;

let elapsedInterval;
let spamSeed = generateSeed()

let promoteCount = 0;
function interrupt() {
    return promoteCount++ >= max_promotions;
}
// WARNING: Not cryptographically secure. Do not use any seeds generated by this generator to actually store any value.
function generateSeed() {
    const validChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ9'
    return Array.from(new Array(81), (x, i) => validChars[Math.floor(Math.random() * validChars.length)]).join('')
}

function generateTransfer() {
    return {
        address: spamSeed,
        value: 0,
        message: '',
        tag: ''
    }
}
const setupPromoteCommand = (data, iotajs, refreshAccountData, vorpal) => {
  vorpal
    .command('promote <hash>', 'Promotes a pending transaction.  Provide an id for additional details.')
    .option('-n <number>', 'Max number of transactions.  Default 10.')
    .autocomplete({
      data: () => {
        vorpal.ui.input(`promote ${vorpal.ui.input().split(' ')[1].toUpperCase()}`);
        if (!data.accountData) {
          return [];
        }
        return data.accountData.transfers.map(b => b[0]).map(t => t.hash.slice(0, 6));
      }
    })
    .action((args, callback) => {
      if (isMissingData(['node', 'seed', 'accountData'])) {
        return callback();
      }

      var hash = args.hash;
      if (hash.length < 81) {
        if (!data.accountData) {
          vorpal.log(chalk.red('Please provide a full transaction hash'));
          return callback();
        }
        const transactionsMatchingHash = data.accountData.transfers
          .map(b => b[0])
          .filter(t => t.hash.indexOf(hash) !== -1);
        if (transactionsMatchingHash.length === 0) {
          vorpal.log(chalk.red('That hash does not match a transaction'));
          return callback();
        }
        hash = transactionsMatchingHash[0].hash;
      }

      iotajs.api.getLatestInclusion([hash], (error, states) => {
        var confirmFound = false;
        if (error)
        {
            vorpal.log(chalk.red('Error checking confirmation status.'));
            return callback();
        }
        states.forEach((confirmed, i) => {
        	if (confirmed) {
            confirmFound = true;
          }
        });
        if (confirmFound)
        {
          vorpal.log(chalk.red('That transaction is already confirmed.'));
          return callback();
        } else {
          vorpal.log(`Promoting transaction ${hash}.  This may take a few minutes.`);
          const start = Date.now();
          elapsedInterval = setInterval(() => {
            process.stdout.write(`You've been waiting ${Math.floor((Date.now() - start)/1000)}s\r`);
          });
          iotajs.api.isPromotable(hash).then(state => {
            if (state) {
              promoteCount = 0;
              var params = { interrupt, delay: 1000 };
              const transfer = generateTransfer();
              iotajs.api.promoteTransaction(hash, data.depth, data.minWeightMagnitude, [transfer], params, function(err){
                if (elapsedInterval) {
                  clearInterval(elapsedInterval);
                  if (err) {
                    vorpal.log(chalk.red(err), '                   \n'); // extra spaces to cover elapsed
                    return callback();
                  }

                  vorpal.log(chalk.green('Promote complete! Refreshing transactions...\n')); // extra spaces to cover elapsed
                  refreshAccountData();
                }
                callback();
              });
            } else {
              vorpal.log(chalk.red('Your transaction can not be promoted, first replay the transaction then attempt a promote with the new replayed transaction.'));
              return callback();
            }
          });
        }
      });
    })

    .cancel(() => {
      clearInterval(elapsedInterval);
      iotajs.api.interruptAttachingToTangle(() => {});
      vorpal.log(chalk.red('promote cancelled\n'));
    });
};

module.exports = setupPromoteCommand;
